# -*- coding: utf-8 -*-
"""TransfareContrastiveLionBasic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IKZehV1-ur8p1Gh9RprbENiQHEBDdl11
"""

import torch
import torch.nn as nn
import random
from torch.autograd import Variable
from PIL import Image
import PIL.ImageOps
from torch import optim
from torch.optim import lr_scheduler
import numpy as np
import torchvision
import torch.nn.functional as F
import torchvision.datasets as dset
from torch.utils.data import Dataset
from torchvision.datasets import ImageFolder
from torch.utils.data import DataLoader
import torchvision.utils
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy
from google.colab import drive
plt.ion()

drive.mount('/content/drive')

class ContrastiveLoss(torch.nn.Module):
  def __init__(self,margin=2.0):
    super(ContrastiveLoss,self).__init__()
    self.margin = margin
    
  def forward(self,output1,output2,label):
    distance = F.pairwise_distance(output1,output2)
    loss_contrastive = torch.mean((1-label)*torch.pow(distance,2) + (label)*torch.pow(torch.clamp(self.margin-distance,min=0.0),2))
    return loss_contrastive

class SiameseNetworkDataset(Dataset):
  def __init__(self,imageFolderDataset,transform=None,should_invert=True):
    self.imageFolderDataset = imageFolderDataset
    self.should_invert = should_invert
    self.transform=transform
  
  def __getitem__(self,index):
    img0_tuple = random.choice(self.imageFolderDataset.imgs)
    
    #randomise getting one class.
    should_get_same_class = random.randint(0,1)
    
    if should_get_same_class:
      while True:
        img1_tuple =random.choice(self.imageFolderDataset.imgs)
        if img0_tuple[1] == img1_tuple[1]:
          break
    else:
      while True:
        img1_tuple =random.choice(self.imageFolderDataset.imgs)
        if img0_tuple[1] != img1_tuple[1]:
          break
    
    img0 =Image.open(img0_tuple[0])
    img1 =Image.open(img1_tuple[0])
    
    #img0 = img0.convert("L")
    #img1 = img1.convert("L")
    
    if self.should_invert:
      img0 =PIL.ImageOps.invert(img0)
      img1 =PIL.ImageOps.invert(img1)
    if self.transform is not None:
      img0 = self.transform(img0)
      img1 = self.transform(img1)
      
    return img0, img1,torch.from_numpy(np.array([int(img1_tuple[1]!=img0_tuple[1])],dtype=np.float32))
  
  def __len__(self):
    return len(self.imageFolderDataset.imgs)

!ls "/content/drive/My Drive/ColabNotebooks/DataProcessed/Lion_Data/train"
print("PyTorch version: ")
print(torch.__version__)
print("CUDA Version: ")
print(torch.version.cuda)
print("cuDNN version is: ")
print(torch.backends.cudnn.version())

def imshow(img,text=None,should_save=False):
  npimg = img.numpy()
  plt.axis("off")
  if text:
    plt.text(75, 8,text,style='italic',fontweight='bold',bbox={'facecolor':'white','alpha':0.8,'pad':10})
  plt.imshow(np.transpose(npimg,(1,2,0)))
  plt.show()
def show_plot(iteration,loss):
  plt.plot(iteration,loss)
  plt.show()

ls "/content/drive/My Drive/ColabNotebooks/DataProcessed/Lion_Data/train"

folder_dataset = dset.ImageFolder(root="/content/drive/My Drive/ColabNotebooks/DataProcessed/Lion_Data/train")
siamese_dataset = SiameseNetworkDataset(imageFolderDataset=folder_dataset,transform=transforms.Compose([transforms.Resize(256),transforms.CenterCrop(224),transforms.ToTensor()]),should_invert=False)

vis_dataloader = DataLoader(siamese_dataset,shuffle=True,num_workers=2,batch_size=2)
dataiter = iter(vis_dataloader)

example_batch=next(dataiter)
concatenated=torch.cat((example_batch[0],example_batch[1]),0)
imshow(torchvision.utils.make_grid(concatenated))
print(example_batch[2].numpy)

train_dataloader = DataLoader(siamese_dataset,shuffle=True,num_workers =4,batch_size=64)

#net = SiameseNetwork().cuda()
#We are using the pretrained model fine tuninig .....  
model = models.resnet34(pretrained=True)

#using model as feature extraction 
# model = models.resnet34(pretrained=True)
#for param in model.parameters():
#  param.requires_grad = False

num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs,128) 

model = model.cuda();

criterion = ContrastiveLoss()

optimizer = optim.Adam(model.parameters(),lr=0.0005)

counter = []

loss_history = []

iteration_number=0

for epoch in range(0,100):
  for i, data in enumerate(train_dataloader,0):
    img0,img1,label = data
    img0,img1,label=img0.cuda(),img1.cuda(),label.cuda()
    
    optimizer.zero_grad()
    #output1,output2 =net(img0,img1)
    output1 =model(img0)
    output2 = model(img1)

    loss_contrastive = criterion(output1,output2,label)
    
    loss_contrastive.backward()
    
    optimizer.step()
    if i%10 ==0:
      #print("Epoch number {}\n Current loss {} \n".format(epoch,loss_contrastive.item()))
      print("Epoch number {}\n Current loss {}\n".format(epoch,loss_contrastive.item()))
      iteration_number +=10
      counter.append(iteration_number)
      #loss_history.append(loss_contrastive.item())
      loss_history.append(loss_contrastive.item())
show_plot(counter,loss_history)

folder_dataset_test = dset.ImageFolder(root="/content/drive/My Drive/ColabNotebooks/DataProcessed/Lion_Data/val")
siamese_dataset=SiameseNetworkDataset(imageFolderDataset=folder_dataset_test,transform=transforms.Compose([transforms.Resize(256),transforms.CenterCrop(224),transforms.ToTensor(),transforms.Normalize([0.485,0.456,0.406],[0.229,0.224,0.225])]),should_invert=False)
test_dataloader = DataLoader(siamese_dataset,num_workers=6,batch_size=1,shuffle=False)
dataiter = iter(test_dataloader)
#x0,_,_= next(dataiter)
correct = 0
total =0
false_positive = 0
false_negative = 0
true_positive=0
true_negative = 0
  
for i in range(0,20):
  x0,x1,label2=next(dataiter)
  concatenated = torch.cat((x0,x1),0)
  output1 =model(Variable(x0).cuda())
  output2 = model(Variable(x1).cuda())
  distance = F.pairwise_distance(output1,output2)
  #distance = F.pairwise_distance(output1,output2)
  currDist = distance.cpu()
  print(currDist.item(),"label",label2.item())
  if(currDist.item()<0.4):
    if(label2.item()==0.0):
      correct+=1
      true_positive+=1
      total+=1
    else:
      false_positive+=1
      total+=1
  else:
    if(label2.item()==1):
      correct+=1
      true_negative+=1
      total+=1
    else:
      false_negative+=1
      total+=1 
  imshow(torchvision.utils.make_grid(concatenated),'Dissimilarity: {:.2f}'.format(distance.item()))
recall = true_positive/(true_positive+false_negative)

selectivity= true_negative/(true_negative+false_positive)

precision = true_positive/(true_positive+false_positive)
tot=(true_positive+true_negative+false_positive+false_negative)
Acc = (true_positive+true_negative)/(true_positive+true_negative+false_positive+false_negative)

  
print("Accuracy of the network on test images is : %d %%" %(100*correct/total))
print("Acc ",Acc," Recall ",recall," Selectivity ",selectivity," Precision ",precision,"tot ",tot,"total",total)
  
  #print("MY {}".format(label1))
  #image_path = path_name.format(label2)+"/out_"+str(i)+".png"
  #torchvision.utils.save_image(x0,'/content/drive/My Drive/out.png')
  #torchvision.utils.save_image(x0,image_path)
  #imshow(torchvision.utils.make_grid(concatenated),'Dissimilarity: {:.2f}'.format(distance.item()))

